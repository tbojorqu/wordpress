{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template VPC_Single_Instance_In_Subnet: Sample template showing how to create a VPC and add an EC2 instance with an Elastic IP address and a security group. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {

    "InstanceType" : {
      "Description" : "Wordpress and Chef server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [ "t2.nano", "t2.micro", "t2.small", "t2.medium"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "WPUser": {
      "Default": "wpuser",
      "Description" : "Username to set the for the wordpress admin.",
      "Type": "String"
    },

    "WPPassword": {
      "Default": "wp_1pass",
      "Description" : "Password to set the for the wordpress admin.",
      "Type": "String"
    },

    "DBUser": {
      "Default": "wpuser",
      "Description" : "Username to set the for the db.",
      "Type": "String"
    },

    "DBPassword": {
      "Default": "wp_1pass",
      "Description" : "Password to set the for the db.",
      "Type": "String"
    },
    
    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "AllowHTTP" : {
      "Description" : "The IP address range that can access EC2 instances on Http port 80",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings" : {

    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "64" : "ami-f5f41398" },
      "us-west-2"      : { "64" : "ami-d0f506b0" }
    }
  },

  "Resources" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.100.0.0/16",
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Name", "Value" : "tbojorquez-vpc"} ]
      }
    },

    "Subnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.100.0.0/24",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Name", "Value" : "tbojorquez-public"} ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Name", "Value" : "tbojorquez-igw"} ]
      }
    },

    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Name", "Value" : "tbojorquez-route"} ]
      }
    },

    "Route" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "SubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "Subnet" },
        "RouteTableId" : { "Ref" : "RouteTable" }
      }
    },

    "NetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "InboundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },

    "InboundSSHNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "22", "To" : "22"}
      }
    },

    "InboundResponsePortsNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },

    "OutBoundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },

    "OutBoundHTTPSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "443", "To" : "443"}
      }
    },

    "OutBoundResponsePortsNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },

    "SubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "Subnet" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },

    "WordpressIPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "WordpressInstance" }
      }
    },

    "ChefIPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "ChefInstance" }
      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : { "Ref" : "AllowHTTP"}}
         ]
      }
    },

    "InstanceSecurityGroupIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId": { "Ref": "InstanceSecurityGroup" },
        "IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535", "SourceSecurityGroupId": { "Ref": "InstanceSecurityGroup" }
      }
    },

    "ChefInstance" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "AttachGateway",
      "Metadata" : {
        "Comment" : "Install a simple application",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "git"               : [],
                "subversion"        : []
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId": { "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, "64" ]},
        "InstanceType" : { "Ref" : "InstanceType" },
        "KeyName": "tbojorquez",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Name", "Value" : "tbojorquez-chef"} ],
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "InstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "Subnet" }
        }],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash -xe\n",
            "yum update -y aws-cfn-bootstrap\n",

            "/opt/aws/bin/cfn-init -v ",
            "         --stack ", { "Ref" : "AWS::StackName" },
            "         --resource ChefInstance ",
            "         --region ", { "Ref" : "AWS::Region" }, "\n",

            "# Chef install/update.\n",
            "cat <<'EOF' >> /root/chef-check.sh\n",
            "#!/bin/bash\n",
            "VERSION=\"12.10.24\"\n",
            "if rpm -qa | grep chef | grep $VERSION; then\n",
            "   exit\n",
            "elif rpm -qa | grep chef | grep -v $VERSION; then\n",
            "   rpm -e chef && curl -L \"http://www.opscode.com/chef/download?p=el&pv=6&m=x86_64&v=$VERSION\" -o chef-install && rpm -Uvh chef-install\n",
            "else\n",
            "   curl -L \"http://www.opscode.com/chef/download?p=el&pv=6&m=x86_64&v=$VERSION\" -o chef-install && rpm -Uvh chef-install\n",
            "fi\n",
            "EOF\n",
            "chmod 755 /root/chef-check.sh\n",
            "/root/chef-check.sh > /tmp/chef_install.log 2>&1 || error_exit 'Failed to install chef.'\n",

            "# Clone github repo\n",
            "cat <<'EOF' >> /root/git-setup.sh\n",
            "#!/bin/bash\n",
            "cd /\n",
            "svn export https://github.com/tbojorqu/wordpress/trunk/chef/cookbooks/\n",
            "EOF\n",
            "chmod 755 /root/git-setup.sh\n",
            "/root/git-setup.sh > /tmp/git-setup.log 2>&1 || error_exit 'Failed to setup git.'\n",

            "CHEF_SERVER=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`\n",

            "mkdir -p /root/.chef\n",

            "cat > /root/.chef/knife.rb << EOF\n",
            "current_dir = File.dirname(__FILE__)\n",
            "log_level       :info\n",
            "log_location     \"/var/log/chef-client.log\"\n",
            "ssl_verify_mode :verify_none\n",
            "node_name 'tbojorquez'\n",
            "client_key \"/root/tbojorquez-chef.pem\"\n",
            "validation_client_name  'tbojorquez-validator'\n",
            "validation_key          \"/root/tbojorquez-validator.pem\"\n",
            "chef_server_url         \"https://$CHEF_SERVER/organizations/tbojorquez\"\n",
            "cache_type 'BasicFile'\n",
            "cache_options( :path => \"#{ENV['HOME']}/.chef/checksums\" )\n",
            "cookbook_path            [\"/cookbooks\"]\n",
            "EOF\n",

            "# Node attributes to be seeded during first run\n",
            "cat > /root/roles.json << EOF\n",
            "{\n",
            "  \"run_list\": [\"my-chef-server\"", "],\n",
            "  \"cloud\": {\n",
            "    \"wp_user\": \"", {"Ref" : "WPUser"} , "\", \n",
            "    \"db_user\": \"", {"Ref" : "DBUser"} , "\", \n",
            "    \"wp_password\": \"", {"Ref" : "WPPassword"} , "\", \n",
            "    \"db_password\": \"", {"Ref" : "DBPassword"} , "\", \n",
            "    \"region_from_template\": \"", {"Ref" : "AWS::Region"} , "\" \n",
            "  } \n",
            "}\n",
            "EOF\n",

            "# Run chef-solo to install the chef-server\n",
            "cat <<'EOF' >> /root/run-chef.sh\n",
            "#!/bin/bash\n",
            "cd /root\n",
            "chef-client -z -j /root/roles.json\n",
            "EOF\n",
            "chmod 755 /root/run-chef.sh\n",
            "/root/run-chef.sh > /var/log/chef-client.log 2>&1 || error_exit 'Chef run failed setting up the chef-server.'\n",

            "/opt/aws/bin/cfn-signal -e $? ",
            "         --stack ", { "Ref" : "AWS::StackName" },
            "         --resource ChefInstance ",
            "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      }
    },

    "WordpressInstance" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "AttachGateway",
      "Metadata" : {
        "Comment" : "Install a simple application",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "git"               : [],
                "subversion"        : []
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId": { "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, "64" ]},
        "InstanceType" : { "Ref" : "InstanceType" },
        "KeyName": "tbojorquez",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Name", "Value" : "tbojorquez-wordpress"} ],
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "InstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "Subnet" }
        }],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "yum update -y aws-cfn-bootstrap\n",

          "/opt/aws/bin/cfn-init -v ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource WordpressInstance ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",

          "# Chef install/update.\n",
          "cat <<'EOF' >> /root/chef-check.sh\n",
          "#!/bin/bash\n",
          "VERSION=\"12.10.24\"\n",
          "if rpm -qa | grep chef | grep $VERSION; then\n",
          "   exit\n",
          "elif rpm -qa | grep chef | grep -v $VERSION; then\n",
          "   rpm -e chef && curl -L \"http://www.opscode.com/chef/download?p=el&pv=6&m=x86_64&v=$VERSION\" -o chef-install && rpm -Uvh chef-install\n",
          "else\n",
          "   curl -L \"http://www.opscode.com/chef/download?p=el&pv=6&m=x86_64&v=$VERSION\" -o chef-install && rpm -Uvh chef-install\n",
          "fi\n",
          "EOF\n",
          "chmod 755 /root/chef-check.sh\n",
          "/root/chef-check.sh > /tmp/chef_install.log 2>&1 || error_exit 'Failed to install chef.'\n",

          "# Clone github repo\n",
          "cat <<'EOF' >> /root/git-setup.sh\n",
          "#!/bin/bash\n",
          "cd /\n",
          "svn export https://github.com/tbojorqu/wordpress/trunk/chef/cookbooks/\n",
          "EOF\n",
          "chmod 755 /root/git-setup.sh\n",
          "/root/git-setup.sh > /tmp/git-setup.log 2>&1 || error_exit 'Failed to setup git.'\n",

          "# Create key file\n",
          "cat > /root/.ssh/key.pem << EOF\n",
          "-----BEGIN RSA PRIVATE KEY-----\n",
          "MIIEpAIBAAKCAQEApVpxyHexrbYcZPSas5UlPN0XQwuR1n59MIjhOTMEPm8CqLDwYxEfwSTHZbtb\n",
          "8q1VGZCJtFA9wLIYcUJdPAZYmQRNhtOFWMnlkXOJvyd6vADFWy9K5nWCReOI/w2ytjh4tFRPxfum\n",
          "gGtRvLNEr9tUl5u5USPiqrIIvmZEwP37rZ7qEt/5BCW0dI1nODtOOr5ynI5KFD4S+9w1A4US13S6\n",
          "W2SspwmNDc8kclFIQmDvpFQL8eV1byQZTW09XO0/ebi//mcelAPgGoP7HMMVQyCmpaBPeTcoSyyu\n",
          "PJOco/lrHTLuFfh9zLzOiWtaHyoMsliYXuPdP0N9OcI4Hm42T8bc/QIDAQABAoIBAQCH9laY/9KZ\n",
          "g6TVXkvWXkzAPwthlaHVPSyzO9n1rn1O2PjWvKbszqfNqPBMNkLkyKGw46hXG6OrTsXKW0dOk+lF\n",
          "6MPWmRaMa3bYoqghBdVlwTyGPdzYosb7sJx1HE5Whxi5LpppsQK3lYcgIkfYUgC8qM84aMl4keue\n",
          "o3jlN/I6T530Maq5Ssi7nq5eClb55WbDPbR3xGysBAMdUhz/S3O02fH5MYdUAnIRKFCda03UX0B3\n",
          "qdaCnOGvDpFJfWeOrG+Zj//HEK528T6RxBHrhjXRybN+4EHwpByWh5F2YEP+iKy8SsXfe6kVOicS\n",
          "bVj6J2dZ9u88qH1xuxZwaNBrFRYBAoGBANzj/TuobvQAGsycOlkHUeEMiXITlStuQCvkXphjryNI\n",
          "OHJ7mSdzoE0w88HZFYeSZUhvoUlCNLCEwUVH/p518fncwhG80KvXnTGUMjBWWPMWWFAF6zhPd4mb\n",
          "ofx52RLoZZDaAV1NER9c52cNq6x+nsmDkogh8uyzuwNFGEcl/5RzAoGBAL+ipmSt2p5fSCSogQKO\n",
          "9O0wYLPfP9aZ2ALh8BUf+B9IUIcAGNTal7SAets17ngvg6SxMPNpzX0ZAznxmAyWOlEMXS1DW/62\n",
          "5LVz4P2hQ5crjx4eEnhqgC14o5oX861+n42NfOS03rjSqCXIbXKPiyGMbZB1+yhrARY9EE47idzP\n",
          "AoGAHyPI9FsXYTCOlp/Dnf9pLJfO3JUkJ15Aj69/Im6TJx8sTf9cpPIo/BjVlFNdNKKPwrlx/Fjo\n",
          "AqaEdJbkr0QjW70iYsvCgyc/Utj4hlX17jcNNiLPeT3CtVSKboRi9MZsYxJItPWDX2+Cc8W6mPO0\n",
          "wOXah3R5waLIz3ozJPyXXj8CgYEAsrd+VEBqtO4JOt7GydsGgjluxfD6+Skqca3CGAFjhdEMAIrP\n",
          "nZpqhpSXft4yEnXFYI87JpbSY8sy3hP4iCyGIFXWg8LhBZANhUeXWRHPFikyZJUJBrHT7hQnBys1\n",
          "PuTq6bk885HWcClNVUcxAvjpeRUcjO/qlgwMzG+QSFVwQbMCgYB3lrxT4Ru6fmjfohTFwym8IvDP\n",
          "VpFqFDbHIIKIf9DtaaDmdzA6WeBbdfH/f9Rp8qbJzcsb0/tz9UprofecetP4cqEz4u80Ts7o63NM\n",
          "ANZvbMcrm7F0ITF/WcgaC/rdqDSUkX4K0iQJpjt+peKZ6mvT0Dv71fnhqKGp69ZU37Zw3Q==\n",
          "-----END RSA PRIVATE KEY-----\n",
          "EOF\n",
          "chmod 600 /root/.ssh/key.pem\n",

          "CHEF_SERVER=\"", { "Fn::GetAtt": [ "ChefInstance", "PrivateIp" ]}, "\"\n",

          "mkdir -p /etc/chef\n",

          "# Get chef certs\n",
          "scp -o StrictHostKeyChecking=no -i /root/.ssh/key.pem ec2-user@$CHEF_SERVER:/tmp/tbojorquez-validator.pem /etc/chef\n",

          "cat > /etc/chef/client.rb << EOF\n",
          "current_dir = File.dirname(__FILE__)\n",
          "log_level       :info\n",
          "log_location     \"/var/log/chef-client.log\"\n",
          "ssl_verify_mode :verify_none\n",
          "node_name \"wordpress\"\n",
          "validation_client_name  'tbojorquez-validator'\n",
          "validation_key          \"#{current_dir}/tbojorquez-validator.pem\"\n",
          "chef_server_url         \"https://$CHEF_SERVER/organizations/tbojorquez\"\n",
          "cookbook_path            [\"/cookbooks\"]\n",
          "EOF\n",

          "# Node attributes to be seeded during first run\n",
          "cat > /etc/chef/roles.json << EOF\n",
          "{\n",
          "  \"run_list\": [\"my-wordpress\"", "],\n",
          "  \"cloud\": {\n",
          "    \"chef_server\": \"", { "Fn::GetAtt": [ "ChefInstance", "PrivateIp" ]} , "\", \n",
          "    \"wp_user\": \"", {"Ref" : "WPUser"} , "\", \n",
          "    \"db_user\": \"", {"Ref" : "DBUser"} , "\", \n",
          "    \"wp_password\": \"", {"Ref" : "WPPassword"} , "\", \n",
          "    \"db_password\": \"", {"Ref" : "DBPassword"} , "\", \n",
          "    \"region_from_template\": \"", {"Ref" : "AWS::Region"} , "\" \n",
          "  } \n",
          "}\n",
          "EOF\n",

          "# Run chef-client to install wordpress\n",
          "cat <<'EOF' >> /root/run-chef.sh\n",
          "#!/bin/bash\n",
          "cd /root\n",
          "chef-client -j /etc/chef/roles.json -N wordpress\n",
          "EOF\n",
          "chmod 755 /root/run-chef.sh\n",
          "/root/run-chef.sh > /var/log/chef-client.log 2>&1 || error_exit 'Failed to initialize wordpress via chef client'\n",

          "/opt/aws/bin/cfn-signal -e $? ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource WordpressInstance ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT10M"
        }
      }
    }

  },

  "Outputs" : {
    "URL" : {
      "Value" : { "Fn::Join" : [ "", ["http://", { "Fn::GetAtt" : ["WordpressInstance", "PublicIp"] }]]},
      "Description" : "Newly created application URL"
    }
  }
}
